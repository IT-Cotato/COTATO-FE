name: CI/CD Pipeline
on:
  push:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Check Node v
        run: node -v

      - name: Set Environment Variables
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "REACT_APP_BASE_URL=${{ secrets.REACT_APP_BASE_URL }}" >> .env
            echo "REACT_APP_SOCKET_URL=${{ secrets.REACT_APP_SOCKET_URL }}" >> .env
            echo "REACT_APP_SENTRY_DSN=${{ secrets.REACT_APP_SENTRY_DSN }}" >> .env
            echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> .env
          elif [ "${GITHUB_REF}" == "refs/heads/release" ]; then
            echo "REACT_APP_BASE_URL=${{ secrets.REACT_APP_QA_BASE_URL }}" >> .env
            echo "REACT_APP_SOCKET_URL=${{ secrets.REACT_APP_QA_SOCKET_URL }}" >> .env
            echo "REACT_APP_SENTRY_DSN=${{ secrets.REACT_APP_SENTRY_DSN }}" >> .env
            echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> .env
          fi
        env:
          REACT_APP_BASE_URL: ${{ secrets.REACT_APP_BASE_URL }}
          REACT_APP_SOCKET_URL: ${{ secrets.REACT_APP_SOCKET_URL }}
          REACT_APP_QA_BASE_URL: ${{ secrets.REACT_APP_QA_BASE_URL }}
          REACT_APP_QA_SOCKET_URL: ${{ secrets.REACT_APP_QA_SOCKET_URL }}

      - name: Install Dependencies
        run: pnpm i --frozen-lockfile

      - name: Install Sentry CLI
        run: pnpm add -g @sentry/cli

      - name: Lint
        run: pnpm run lint --max-warnings=0
        continue-on-error: false

      - name: Build
        run: pnpm run build:prod
        continue-on-error: false

      - name: Upload sourcemaps to Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          sentry-cli sourcemaps inject --org cotato-fe --project cotato build
          sentry-cli sourcemaps upload --org cotato-fe --project cotato build

      - name: Save Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: |
            build
            appspec.yml
            deploy.sh

  production-deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Zip Build Folder
        run: zip -qq -r build-fe.zip build appspec.yml deploy.sh
        shell: bash

      - name: Upload to S3
        run: |
          aws s3 cp build-fe.zip s3://${{ secrets.AWS_S3_BUCKET_NAME }}/build-fe.zip --region ap-northeast-2

      - name: Deploy
        run: |
          aws deploy create-deployment \
            --application-name cotato-deploy \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name cotato-deploy-fe-production \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME }},key=build-fe.zip,bundleType=zip

  qa-deploy:
    needs: build
    if: github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Zip Build Folder
        run: zip -qq -r build-fe.zip build appspec.yml deploy.sh
        shell: bash

      - name: Upload to S3
        run: |
          aws s3 cp build-fe.zip s3://${{ secrets.AWS_S3_BUCKET_NAME }}/build-fe.zip --region ap-northeast-2

      - name: Deploy
        run: |
          aws deploy create-deployment \
            --application-name cotato-deploy \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name cotato-deploy-fe-release \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME }},key=build-fe.zip,bundleType=zip
